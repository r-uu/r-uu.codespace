package de.ruu.app.jeeeraaah.client.fx.taskgroup.selector;

import de.ruu.app.jeeeraaah.common.dto.TaskGroupFlat;
import de.ruu.lib.cdi.se.EventDispatcher;
import de.ruu.lib.fx.comp.FXCService;
import de.ruu.lib.util.AbstractEvent;
import jakarta.enterprise.context.ApplicationScoped;
import javafx.beans.property.ReadOnlyObjectProperty;
import lombok.NonNull;

import java.util.Set;

/**
 * Java FX Component View Service
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewService} at 2025.03.20 16:56:31:294
 */
public interface TaskGroupSelectorService extends FXCService
{
	/** @return The currently selected task group as {@link TaskGroupFlat} property. */
	@NonNull ReadOnlyObjectProperty<TaskGroupFlat> selectedTaskGroupProperty();

	/** Set the available task groups (as {@link TaskGroupFlat} instances) to select from. */
	void items(@NonNull Set<TaskGroupFlat> groups);

	/** Event that is fired to indicate that a {@link TaskGroupSelector} component has become available. */
	public class TaskGroupSelectorComponentReadyEvent extends AbstractEvent<TaskGroupSelector, TaskGroupSelectorService>
	{
		public TaskGroupSelectorComponentReadyEvent(
				final TaskGroupSelector component,
				final TaskGroupSelectorService service) { super(component, service); }

		@ApplicationScoped
		public static class TaskGroupSelectorComponentReadyEventDispatcher extends EventDispatcher<TaskGroupSelectorComponentReadyEvent> { }

		/** programmatically specify command line vm option {@code --add-reads de.ruu.lib.fx.comp=ALL-UNNAMED} */
		public static void addReadsUnnamedModule()
		{
			TaskGroupSelectorComponentReadyEvent
					.class
					.getModule()
					.addReads(TaskGroupSelectorComponentReadyEvent.class.getClassLoader().getUnnamedModule());
		}
	}
}