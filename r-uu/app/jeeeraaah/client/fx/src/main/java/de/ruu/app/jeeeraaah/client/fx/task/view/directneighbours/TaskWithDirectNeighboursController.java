package de.ruu.app.jeeeraaah.client.fx.task.view.directneighbours;

import de.ruu.app.jeeeraaah.client.fx.task.view.TaskView;
import de.ruu.app.jeeeraaah.client.fx.task.view.list.directneighbours.TaskListDirectNeighbours;
import de.ruu.app.jeeeraaah.client.fx.task.view.list.directneighbours.TaskListDirectNeighboursService.NeighbourType;
import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.lib.fx.FXUtil;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.mapstruct.ReferenceCycleTracking;
import jakarta.enterprise.inject.spi.CDI;
import jakarta.inject.Inject;
import javafx.fxml.FXML;
import javafx.scene.Parent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Region;
import javafx.scene.layout.StackPane;
import lombok.NonNull;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.06.13 17:06:53:248
 */
class TaskWithDirectNeighboursController
		extends     DefaultFXCController<TaskWithDirectNeighbours, TaskWithDirectNeighboursService>
		implements TaskWithDirectNeighboursService
{
	@FXML private AnchorPane nchrPnTaskSuper;
	@FXML private AnchorPane nchrPnPredecessors;
	@FXML private AnchorPane nchrPnTask;
	@FXML private AnchorPane nchrPnSubTasks;
	@FXML private AnchorPane nchrPnSuccessors;

	@Inject private TaskDirectNeighbourSuper taskViewSuper;

	@Inject private TaskView taskView;
	@Inject private TaskListDirectNeighbours taskViewPredecessors;
	@Inject private TaskListDirectNeighbours taskViewSubTasks;
	@Inject private TaskListDirectNeighbours taskViewSuccessors;

	@Override
	@FXML protected void initialize()
	{
		Parent rootTaskViewSuper        = taskViewSuper       .localRoot();
		Parent rootTaskView             = taskView            .localRoot();
		Parent rootTaskViewPredecessors = taskViewPredecessors.localRoot();
		Parent rootTaskViewSubTasks     = taskViewSubTasks    .localRoot();
		Parent rootTaskViewSuccessors 	= taskViewSuccessors  .localRoot();

		FXUtil.setAnchorsInAnchorPaneTo(rootTaskViewSuper       , 0);
		FXUtil.setAnchorsInAnchorPaneTo(rootTaskView            , 0);
		FXUtil.setAnchorsInAnchorPaneTo(rootTaskViewPredecessors, 0);
		FXUtil.setAnchorsInAnchorPaneTo(rootTaskViewSubTasks    , 0);
		FXUtil.setAnchorsInAnchorPaneTo(rootTaskViewSuccessors  , 0);

		nchrPnTaskSuper   .prefWidthProperty ().bind(nchrPnTask.widthProperty ());
		nchrPnPredecessors.prefHeightProperty().bind(nchrPnTask.heightProperty());
		nchrPnSuccessors  .prefHeightProperty().bind(nchrPnTask.heightProperty());
		nchrPnSubTasks    .prefWidthProperty ().bind(nchrPnTask.widthProperty ());
//		nchrPnSubTasks    .prefHeightProperty().bind(nchrPnTask.heightProperty().add(nchrPnTaskSuper.heightProperty()));
		nchrPnSubTasks    .prefHeightProperty().bind(nchrPnTask.heightProperty());

		StackPane stckPnSuperTask    = FXUtil.createTitledBorder("super task"  , (Region) rootTaskViewSuper);
		StackPane stckPnTask         = FXUtil.createTitledBorder("active task" , (Region) rootTaskView);
		StackPane stckPnPredecessors = FXUtil.createTitledBorder("predecessors", (Region) rootTaskViewPredecessors);
		StackPane stckPnSubTasks     = FXUtil.createTitledBorder("sub tasks"   , (Region) rootTaskViewSubTasks);
		StackPane stckPnSuccessors   = FXUtil.createTitledBorder("successors"  , (Region) rootTaskViewSuccessors);

		FXUtil.updateBorderWidth((Region) rootTaskView, 2);

		stckPnSuperTask   .setMaxWidth(Double.MAX_VALUE);
		stckPnTask        .setMaxWidth(Double.MAX_VALUE);
		stckPnPredecessors.setMaxWidth(Double.MAX_VALUE);
		stckPnSubTasks    .setMaxWidth(Double.MAX_VALUE);
		stckPnSuccessors  .setMaxWidth(Double.MAX_VALUE);

		stckPnSuperTask   .prefWidthProperty ().bind(stckPnTask.widthProperty ());
		stckPnSubTasks    .prefWidthProperty ().bind(stckPnTask.widthProperty ());

		stckPnPredecessors.prefHeightProperty().bind(stckPnTask.heightProperty());
		stckPnSuccessors  .prefHeightProperty().bind(stckPnTask.heightProperty());

		nchrPnTaskSuper   .getChildren().add(stckPnSuperTask   );
		nchrPnTask        .getChildren().add(stckPnTask        );
		nchrPnPredecessors.getChildren().add(stckPnPredecessors);
		nchrPnSubTasks    .getChildren().add(stckPnSubTasks    );
		nchrPnSuccessors  .getChildren().add(stckPnSuccessors  );

		CDI.current().getBeanManager().getEvent().fire(new TaskViewWithDirectNeighboursServiceReadyEvent(this, view()));
	}

	@Override public void populateViewFor(@NonNull TaskBean taskBean)
	{
		taskViewSuper           .service().populateViewFor(taskBean);
		taskView                .service().populateViewFor(taskBean.toFXBean(new ReferenceCycleTracking()));;
		taskViewPredecessors    .service().populateViewFor(taskBean, NeighbourType.PREDECESSOR);
		taskViewSubTasks        .service().populateViewFor(taskBean, NeighbourType.SUB);
		taskViewSuccessors      .service().populateViewFor(taskBean, NeighbourType.SUCCESSOR);
	}

	@Override public TaskDirectNeighbourSuper taskViewSuper       () { return taskViewSuper;        }
	@Override public TaskListDirectNeighbours taskViewPredecessors() { return taskViewPredecessors; }
	@Override public TaskListDirectNeighbours taskViewSubTasks    () { return taskViewSubTasks;     }
	@Override public TaskListDirectNeighbours taskViewSuccessors  () { return taskViewSuccessors;   }
}