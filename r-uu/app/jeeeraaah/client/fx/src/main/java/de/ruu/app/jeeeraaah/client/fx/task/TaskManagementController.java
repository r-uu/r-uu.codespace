package de.ruu.app.jeeeraaah.client.fx.task;

import de.ruu.app.jeeeraaah.client.fx.task.edit.TaskEditor;
import de.ruu.lib.ws.rs.NonTechnicalException;
import de.ruu.app.jeeeraaah.client.ws.rs.TaskGroupServiceClient;
import de.ruu.app.jeeeraaah.client.ws.rs.TaskServiceClient;
import de.ruu.lib.ws.rs.TechnicalException;
import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.app.jeeeraaah.common.bean.TaskGroupBean;
import de.ruu.app.jeeeraaah.common.dto.TaskEntityDTO;
import de.ruu.app.jeeeraaah.common.dto.TaskGroupEntityDTO;
import de.ruu.app.jeeeraaah.common.fx.TaskFXBean;
import de.ruu.app.jeeeraaah.common.fx.TaskGroupFXBean;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.comp.FXCAppStartedEvent.FXCAppStartedEventDispatcher;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.dialog.ExceptionDialog;
import de.ruu.lib.mapstruct.ReferenceCycleTracking;
import jakarta.enterprise.inject.spi.CDI;
import jakarta.inject.Inject;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.DialogPane;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.ToolBar;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.util.Callback;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.Set;

import static de.ruu.lib.fx.FXUtil.getStage;
import static java.util.Objects.isNull;
import static javafx.scene.control.ButtonBar.ButtonData.OK_DONE;
import static javafx.scene.control.ButtonType.CANCEL;
import static javafx.scene.control.ButtonType.OK;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2024.12.27 15:31:28:925
 */
@Slf4j
class TaskManagementController extends DefaultFXCController<TaskManagement, TaskManagementService>
		implements TaskManagementService
{
	private final static String APP_TITLE = "jeee RAAAH - task management";

	@FXML private Button btnAdd;
	@FXML private Button btnEdit;
	@FXML private Button btnExit;
	@FXML private Button btnRemove;

	@FXML private ImageView ivwAdd;
	@FXML private ImageView ivwEdit;
	@FXML private ImageView ivwRemove;
	@FXML private ImageView ivwExit;

	@FXML private AnchorPane root;

	@FXML private ToolBar tbr1;
	@FXML private ToolBar tbr2;

	@FXML private ComboBox<TaskGroupFXBean> cmbBxGroups;
	@FXML private Pane                      pnGroups;

	@FXML private TableView<TaskFXBean> tv;
	@FXML private TextArea              txtAreaDescription;

	@Inject private TaskEditor editor;

	@Inject private FXCAppStartedEventDispatcher eventDispatcherFXCAppStarted;

	@Inject private TaskServiceClient      taskServiceClient;
	@Inject private TaskGroupServiceClient taskGroupServiceClient;

	private Parent editorLocalRoot;

	@Override
	@FXML protected void initialize()
	{
		log.debug("eventDispatcherFXCAppStarted == null {}", eventDispatcherFXCAppStarted == null);

		eventDispatcherFXCAppStarted.add(e -> onAppStarted((FXCAppStartedEvent) e));

		// force editor to fxml-inject internal fx-controls
		editorLocalRoot = editor.localRoot();

		TableViewConfigurator.configure(tv);

		ReferenceCycleTracking context = new ReferenceCycleTracking();
		try
		{
			taskGroupServiceClient.findAll().forEach(tg -> cmbBxGroups.getItems().add(tg.toFXBean(context)));
		}
		catch (TechnicalException | NonTechnicalException e)
		{
			ExceptionDialog.showAndWait("failure retrieving tasks from backend", e);
		}

		Callback<ListView<TaskGroupFXBean>, ListCell<TaskGroupFXBean>> cmbBxCellFactory = cmbBxCellFactory();
		cmbBxGroups.setButtonCell(cmbBxCellFactory.call(null)); // TODO find out if this is better than using a converter
		cmbBxGroups.setCellFactory(cmbBxCellFactory);
		cmbBxGroups
				.getSelectionModel()
				.selectedItemProperty()
				.addListener((obs, old, newValue) -> onSelectedTaskGroupChanged(obs, old, newValue));
		tv.getSelectionModel()
			.selectedItemProperty()
			.addListener((obs, old, newValue) -> onSelectedTaskChanged(obs, old, newValue));
		btnAdd .setOnAction(e -> onAdd (e));
		btnExit.setOnAction(e -> onExit(e));

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE));
	}

	private void onSelectedTaskGroupChanged(
			ObservableValue<? extends TaskGroupFXBean> obs, TaskGroupFXBean old, TaskGroupFXBean newValue)
	{
		if (isNull(newValue)) return;
		Long newTaskGroupid = newValue.id();
		if (isNull(newTaskGroupid)) return;
		// repopulate table view
		tv.getItems().clear();

		try
		{
			Optional<TaskGroupBean> optional = taskGroupServiceClient.findWithTasks(newTaskGroupid);

			if (optional.isPresent())
			{
				Optional<Set<TaskBean>> optionalTasks = optional.get().tasks();
				if (optionalTasks.isPresent())
				{
					ReferenceCycleTracking context = new ReferenceCycleTracking();
					optionalTasks.get().forEach(t -> tv.getItems().add(t.toFXBean(context)));
				}
			}
		}
		catch (TechnicalException | NonTechnicalException e)
		{
			ExceptionDialog.showAndWait("failure retrieving tasks from backend", e);
		}
	}

	private void onSelectedTaskChanged(ObservableValue<? extends TaskFXBean> obs, TaskFXBean old, TaskFXBean newValue)
	{
		// repopulate text area for description
		if (isNull(newValue)) txtAreaDescription.setText("");
		else newValue.description().ifPresent(d -> txtAreaDescription.setText(d));
	}

	private void onAdd(ActionEvent e)
	{
		// populate editor with new item, call to getService() has to be done after call to getLocalRoot() to make sure
		// internal java fx bindings can be established (see initialize)
		TaskGroupBean taskGroupBean = new TaskGroupBean("new task group");
		TaskBean      taskBean      = new TaskBean(taskGroupBean, "new task");
		TaskFXBean    taskFXBean    = taskBean.toFXBean(new ReferenceCycleTracking());

		editor.service().task(taskFXBean);

		Dialog<TaskFXBean> dialog = new Dialog<>();

		DialogPane pane = dialog.getDialogPane();
		pane.setContent(editorLocalRoot);
		pane.getButtonTypes().addAll(CANCEL, OK);

		dialog.setTitle("new task group");
		dialog.setResultConverter(this::dialogResultConverterFXBean);

		Optional<TaskFXBean> optional = dialog.showAndWait();

		if (optional.isPresent())
		{
			taskFXBean = optional.get();
			taskBean   = taskFXBean.toBean(new ReferenceCycleTracking());

			// let client create a new item in db
			try
			{
				taskBean   = taskServiceClient.create(taskBean);
				taskFXBean = taskBean.toFXBean(new ReferenceCycleTracking());

				// add and select item with retrieved item
				tv.getItems().add(taskFXBean);
				tv.getSelectionModel().select(taskFXBean);
			}
			catch (TechnicalException | NonTechnicalException ex)
			{
				ExceptionDialog.showAndWait
				(
						"failure creating task",
						"task\n\n" + taskBean + "\n\ncould not be created",
						ex.getMessage(),
						ex
				);
			}
		}
	}

	private void onExit(ActionEvent e)
	{
		CDI.current().getBeanManager().getEvent().fire(new TaskManagementDisposeRequestEvent(this));
	}

	private TaskFXBean dialogResultConverterFXBean(ButtonType btn)
	{
		if (btn.getButtonData() == OK_DONE)
				return editor.service().task().orElse(null);
		return null;
	}

	private Callback<ListView<TaskGroupFXBean>, ListCell<TaskGroupFXBean>> cmbBxCellFactory()
	{
		return
				new Callback<ListView<TaskGroupFXBean>, ListCell<TaskGroupFXBean>>()
				{
					@Override public ListCell<TaskGroupFXBean> call(ListView<TaskGroupFXBean> listView)
					{
						return
								new ListCell<>()
								{
									@Override protected void updateItem(TaskGroupFXBean item, boolean empty)
									{
										super.updateItem(item, empty);
										if (item == null || empty) setGraphic(null);
										else                       setText(item.getName());
									}
								};
					}
				};
	}

	private void onAppStarted(FXCAppStartedEvent e) { getStage(root).ifPresent(s -> s.setTitle(APP_TITLE)); }
}