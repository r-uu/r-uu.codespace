package de.ruu.app.jeeeraaah.client.fx.taskgroup.selector;

import de.ruu.app.jeeeraaah.common.dto.TaskGroupFlat;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.autocomplete.textfield.AutoCompleteTextField;
import de.ruu.lib.fx.control.autocomplete.textfield.AutoCompleteTextFieldBuilder;
import de.ruu.lib.util.Collections;
import de.ruu.lib.util.Strings;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.control.Tooltip;
import javafx.scene.layout.HBox;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Set;
import java.util.function.BiPredicate;
import java.util.function.Function;

import static de.ruu.lib.cdi.common.CDIUtil.fire;
import static java.util.Objects.isNull;
import static java.util.Objects.nonNull;
import static javafx.scene.layout.Priority.ALWAYS;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.03.20 16:56:31:298
 */
@Slf4j
class TaskGroupSelectorController
		extends DefaultFXCController<TaskGroupSelector, TaskGroupSelectorService> implements TaskGroupSelectorService
{
	@FXML private HBox root;

	private final static BiPredicate<TaskGroupFlat, String > BIPREDICATE_SUGGESTION     =
			(group, text) -> isGroupValidSuggestionForText(group, text);
//	private final static BiPredicate<TaskGroupFlat, String > BIPREDICATE_CONVERTER      =
//			(group, text) -> doesTextIdentifyGroup        (group, text);
	private final static Function   <TaskGroupFlat, Node   > FUNCTION_GRAPHICS_PROVIDER =
			group         -> getTaskGroupGraphics         (group      );
	private final static Function   <TaskGroupFlat, String > FUNCTION_TEXT_PROVIDER     =
			group         -> getTaskGroupText             (group      );
	private final static Function   <TaskGroupFlat, Tooltip> FUNCTION_TOOLTIP_PROVIDER  =
			group         -> getTaskGroupTooltip          (group      );

	private AutoCompleteTextField<TaskGroupFlat> textField;

	@Override @FXML protected void initialize()
	{
		textField =
				AutoCompleteTextFieldBuilder.<TaskGroupFlat>create()
//						.items           (groups)
						.items           (List.of())
						.suggestionFilter(BIPREDICATE_SUGGESTION)
						.graphicsProvider(FUNCTION_GRAPHICS_PROVIDER)
						.textProvider    (FUNCTION_TEXT_PROVIDER)
						.toolTipProvider (FUNCTION_TOOLTIP_PROVIDER)
						.prompt          ("select task group")
						.build();

		textField.setMaxWidth(Double.MAX_VALUE);
		HBox.setHgrow(textField, ALWAYS);

		root.getChildren().add(textField);
		textField.valueProperty().addListener((obs, old, val) -> onTaskGroupSelectionCommittedChanged(val));

		// fire ecent to indicate that component is available
		// users of TaskGroupSelector should wait for this event to make sure that initialisation is completed before
		// accessing fields like textField
		fire(new TaskGroupSelectorComponentReadyEvent(view(), this));
	}

	@Override public @NonNull ReadOnlyObjectProperty<TaskGroupFlat> selectedTaskGroupProperty() { return textField.valueProperty(); }

	@Override public void items(@NonNull Set<TaskGroupFlat> groups)
	{
		List<TaskGroupFlat> groupList = Collections.asList(groups);
		groupList.sort((o1, o2) -> o1.name().compareTo(o2.name()));
		textField.items(groupList);
	}

	private void onTaskGroupSelectionCommittedChanged(TaskGroupFlat val) { log.debug("selected task group {}", val); }

	private static boolean isGroupValidSuggestionForText(TaskGroupFlat group, String text)
			{
				return
					   Strings.isNullOrEmptyOrBlank(text) // always suggest all groups if no "real" text is available
					|| group.name().toLowerCase().contains(text.toLowerCase());
			}

	private static boolean doesTextIdentifyGroup(TaskGroupFlat group, String text)
			{ return nonNull(group) && group.name().equals(text); }

	private static Node getTaskGroupGraphics (TaskGroupFlat group)
			{ return null; }

	private static String  getTaskGroupText(TaskGroupFlat group)
			{ return isNull(group) ? "" : group.name(); }

	private static Tooltip  getTaskGroupTooltip(TaskGroupFlat group)
			{ return isNull(group) ? new Tooltip("") : new Tooltip(group.name()); }
}