package de.ruu.app.jeeeraaah.client.fx.task.view.hierarchy.successor;

import de.ruu.app.jeeeraaah.client.fx.task.view.hierarchy.TaskHierarchyControllerAbstract;
import de.ruu.app.jeeeraaah.client.fx.task.view.hierarchy.successor.add.ActionAdd;
import de.ruu.app.jeeeraaah.client.ws.rs.TaskServiceClient;
import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.lib.fx.control.dialog.AlertDialog;
import jakarta.inject.Inject;
import javafx.fxml.FXML;
import javafx.scene.control.TreeItem;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static java.util.Objects.isNull;
import static javafx.scene.control.Alert.AlertType.ERROR;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.06.03 12:49:45:376
 */
@Slf4j
class TaskHierarchySuccessorsController
		extends TaskHierarchyControllerAbstract implements TaskHierarchySuccessorsService
{
	@Inject private TaskServiceClient taskServiceClient;

	private TreeItem<TaskBean> selectedSuperSubTaskTreeItem;
	private TreeItem<TaskBean> selectedSuccessorTreeItem;

	@Override @FXML protected void initialize()
	{
		super.initialize();

		treeView()
				.getSelectionModel().selectedItemProperty().addListener((obs, old, act) -> selectedSuccessorTreeItem = act);

		buttonAdd().setOnAction(e -> onButtonAddAction());
	}

	@Override public void selectedSuperSubTaskTreeItemChanged(TreeItem<TaskBean> selectedSuperSubTaskTreeItem)
	{
		this.selectedSuperSubTaskTreeItem = selectedSuperSubTaskTreeItem;

		treeView().getRoot().getChildren().clear(); // clear the successor tree view

		if (isNull(selectedSuperSubTaskTreeItem)) return;

		if (selectedSuperSubTaskTreeItem.getValue().successors().isPresent())
		{
			Set<TaskBean> successors = selectedSuperSubTaskTreeItem.getValue().successors().get();
			successors.forEach
			(
					successor -> treeView().getRoot().getChildren().add(populateTreeNode(treeView().getRoot(), successor))
			);
		}
	}

	private void onButtonAddAction()
	{
		if (isNull(selectedSuperSubTaskTreeItem) && isNull(selectedSuccessorTreeItem))
		{
			AlertDialog.showAndWait(
					"can not add successor relation",
					"no successor nor super/sub task is selected",
					"select a successor and/or a super/sub task as target for the new successor relation", ERROR);
			return;
		}

		new ActionAdd(
				new ActionAdd.Context(
						selectedSuperSubTaskTreeItem,
						selectedSuccessorTreeItem == null ? treeView().getRoot() : selectedSuccessorTreeItem,
						taskServiceClient))
				.execute();
	}

	@Override protected TreeItem<TaskBean> populateTreeNode(TreeItem<TaskBean> root, TaskBean task)
	{
		TreeItem<TaskBean> result = new TreeItem<>(task) { @Override public String toString() { return task.name(); } };
		task.successors().ifPresent(successors -> populateTreeNode(result, successors));
		return result;
	}

	private void populateTreeNode(TreeItem<TaskBean> result, Set<TaskBean> tasks)
	{
		List<TaskBean> tasksAsList = new ArrayList<>(tasks);
		tasksAsList.sort((o1, o2) -> o1.name().compareTo(o2.name()));
		tasksAsList.forEach(task -> result.getChildren().add(populateTreeNode(result, task)));
	}
}