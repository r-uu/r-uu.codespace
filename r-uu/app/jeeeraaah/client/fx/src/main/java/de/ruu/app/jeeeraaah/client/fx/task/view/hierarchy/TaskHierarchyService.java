package de.ruu.app.jeeeraaah.client.fx.task.view.hierarchy;

import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.app.jeeeraaah.common.bean.TaskGroupBean;
import de.ruu.lib.cdi.se.EventDispatcher;
import de.ruu.lib.fx.comp.FXCService;
import de.ruu.lib.fx.control.buttons.Add;
import de.ruu.lib.fx.control.buttons.AddService;
import de.ruu.lib.util.AbstractEvent;
import jakarta.enterprise.context.ApplicationScoped;
import javafx.beans.property.ObjectProperty;
import lombok.NonNull;

import java.util.List;

/**
 * Java FX Component View Service
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewService} at 2025.06.03 12:49:45:374
 */
public interface TaskHierarchyService extends FXCService
{
	/** Event that is fired to indicate that a {@link Add} component has become available. */
	public class TaskHierarchyComponentReadyEvent extends AbstractEvent<TaskHierarchyAbstract, TaskHierarchyService>
	{
		@ApplicationScoped
		public static class TaskHierarchyComponentReadyEventDispatcher extends EventDispatcher<TaskHierarchyComponentReadyEvent> { }

		public TaskHierarchyComponentReadyEvent(
				final @NonNull TaskHierarchyAbstract taskHierarchy, final @NonNull TaskHierarchyService taskHierarchyService)
				{ super(taskHierarchy, taskHierarchyService); }

		public TaskHierarchyAbstract component() { return source(); }
		public TaskHierarchyService service  ()
				{ return data().orElseThrow(() -> new IllegalStateException("data must not be absent"));}

		/** programmatically specify command line vm option {@code --add-reads de.ruu.lib.fx.comp=ALL-UNNAMED} */
		public static void addReadsUnnamedModule()
		{
			AddService.AddComponentReadyEvent
					.class
					.getModule()
					.addReads(TaskHierarchyComponentReadyEvent.class.getClassLoader().getUnnamedModule());
		}
	}

	void populate(@NonNull List<TaskBean> tasks);
	ObjectProperty<TaskGroupBean> activeTaskGroupProperty();
	void focusRootItem();
}