package de.ruu.app.jeeeraaah.common.api.ws.rs;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import de.ruu.app.jeeeraaah.common.api.domain.TaskGroupEntity;
import de.ruu.app.jeeeraaah.common.api.domain.TaskGroupLazy;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.experimental.Accessors;

import java.util.HashSet;
import java.util.Set;

import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;
import static java.util.Objects.requireNonNull;

/** Transfer object for task groups with the ids of their related tasks. */
@JsonAutoDetect(fieldVisibility = ANY)
@EqualsAndHashCode
@ToString
@Getter
@Accessors(fluent = true)
public class TaskGroupDTOLazy implements TaskGroupLazy
{
	private @NonNull  Long   id;
	private @NonNull  Short  version;
	private @NonNull  String name;

	private final @NonNull  Set<Long> taskIds = new HashSet<>();

	///////////////
	// constructors
	///////////////

	public TaskGroupDTOLazy() { } // for jackson

	/**
	 * hand-made required args constructor to guarantee usage of hand made accessors.
	 * @param name non-empty name
	 */
	public TaskGroupDTOLazy(@NonNull String name) { name(name); }

	/**
	 * create a new task group lazy from an existing entity
	 * <p>
	 * This constructor is used by mapstruct to create a new task group entity from an existing one.
	 * @param in   the existing entity, must not be {@code null}
	 */
	public TaskGroupDTOLazy(@NonNull TaskGroupEntity<?> in)
	{
		this(in.name());
		id      = requireNonNull(in.id());
		version = requireNonNull(in.version());
	}

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@NonNull public TaskGroupDTOLazy name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

	@Override public @Nullable Long  getId     () { return id;      }
	@Override public @Nullable Short getVersion() { return version; }

	public @NonNull String getName()                     { return name;  }
	public          void   setName(@NonNull String name) {   name(name); }
}