package de.ruu.app.jeeeraaah.common.bean;

import de.ruu.app.jeeeraaah.common.Task;
import de.ruu.app.jeeeraaah.common.TaskGroup;
import de.ruu.app.jeeeraaah.common.dto.TaskEntityDTO;
import de.ruu.app.jeeeraaah.common.dto.TaskGroupEntityDTO;
import de.ruu.app.jeeeraaah.common.dto.TaskGroupLazy;
import de.ruu.app.jeeeraaah.common.fx.TaskFXBean;
import de.ruu.app.jeeeraaah.common.fx.TaskGroupFXBean;
import de.ruu.app.jeeeraaah.common.map.Map_TaskGroup_Bean_EntityDTO;
import de.ruu.app.jeeeraaah.common.map.Map_TaskGroup_Bean_FXBean;
import de.ruu.lib.jpa.core.Entity;
import de.ruu.lib.mapstruct.ReferenceCycleTracking;
import de.ruu.lib.util.Strings;
import jakarta.annotation.Nullable;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import lombok.ToString;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import static de.ruu.lib.util.BooleanFunctions.not;
import static java.util.Objects.isNull;
import static lombok.AccessLevel.NONE;

/** JavaBean for implementing business logic */
// EqualsAndHashCode is for documenting the intent of manually created equals and hashCode methods
@EqualsAndHashCode(onlyExplicitlyIncluded = true, callSuper = false, doNotUseGetters = true)
@ToString
@Slf4j
@Getter                   // generate getter methods for all fields using lombok unless configured otherwise
@Setter                   // generate setter methods for all fields using lombok unless configured otherwise
@Accessors(fluent = true) // generate fluent accessors with lombok and java-bean-style-accessors in non-abstract classes
                          // with ide, fluent accessors will (usually / by default) be ignored by mapstruct
public class TaskGroupBean
		implements
				TaskGroup<TaskBean>,
				Entity<Long>
{
	@EqualsAndHashCode.Include // documents intent of including id for equals() and hashCode() but both methods are
	                           // manually created
	@Nullable @Setter(NONE)
	private Long  id;
	@Setter(NONE) @Nullable private Short version;

	/** mutable non-null */
	// no lombok-generation of setter because of additional validation in manually created method
	@Setter(NONE)
	@NonNull  private String name;

	/** mutable nullable */
	@Nullable private String description;

	/**
	 * prevent direct access to this modifiable set from outside this class, use {@link #addTask(TaskBean)} and
	 * {@link #removeTask(TaskBean)} to modify the set
	 * <p>
	 * may explicitly be {@code null}, {@code null} indicates that there was no attempt to load related objects from db
	 * (lazy)
	 */
	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@Getter(NONE) // provide handmade getter that returns unmodifiable
	@Setter(NONE) // no setter at all
	@Nullable private Set<TaskBean> tasks;

	///////////////
	// constructors
	///////////////

	/**
	 * hand-made required args constructor to guarantee usage of hand made accessors.
	 * @param name non-empty name
	 */
	public TaskGroupBean(@NonNull String name) { name(name); }

	/**
	 * create a new task group bean from an existing entity
	 * <p>
	 * This constructor is used by mapstruct to create a new task group entity from an existing one.
	 * @param in   the existing entity, must not be {@code null}
	 * @param name non-empty name, must not be {@code null}, empty or blank
	 */
	public TaskGroupBean(@NonNull de.ruu.lib.jpa.core.Entity<Long> in, @NonNull String name)
	{
		this.id      = in.id();
		this.version = in.version();
		name(name);
	}

	@Override public boolean equals(Object o)
	{
		if (this == o) return true;
		if (!(o instanceof TaskGroupBean other)) return false;

		if (this.id != null && other.id != null) return id.equals(other.id);
		return false;
	}

	@Override public int hashCode() { return id != null ? id.hashCode() : System.identityHashCode(this); }

	// --- helper to rehash after IDs assigned
	public void rehashTasks() { if (not(isNull(tasks))) tasks = new HashSet<>(tasks); }

	////////////////////////////////////////////////////////////////////////
	// fluent style accessors generated by lombok if not specified otherwise
	////////////////////////////////////////////////////////////////////////

	/**
	 * manually created fluent setter with extra parameter check (see throws documentation)
	 * @param name non-null, non-empty, non-blank
	 * @return {@code this}
	 * @throws IllegalArgumentException if {@code name} parameter is empty or blank
	 * @throws NullPointerException     if {@code name} parameter is {@code null}
	 */
	@Override @NonNull public TaskGroupBean name(@NonNull String name)
	{
		if (Strings.isEmptyOrBlank(name)) throw new IllegalArgumentException("name must not be empty nor blank");
		this.name = name;
		return this;
	}

	@Override public Optional<String> description() { return Optional.ofNullable(description); }

	/** @return optional unmodifiable */
	@Override public Optional<Set<TaskBean>> tasks()
	{
		if (isNull(tasks)) return Optional.empty();
		return Optional.of(Collections.unmodifiableSet(tasks));
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	// java bean style accessors for those who do not work with fluent style accessors (mapstruct)
	//////////////////////////////////////////////////////////////////////////////////////////////

// name is initialised in constructor, so no getter/setter needed
//	@NonNull
//	public String getName()                     { return name(); }
//	public void   setName(@NonNull String name) {   name(name);  }

	@Nullable
	public String getDescription()                             { return description().orElse(null); }
	public void   setDescription(@Nullable String description) { description(description); }
	// do _NOT_ define getter for tasks to avoid handling of tasks by mapstruct automatism

	///////////////////////
	// additional accessors
	///////////////////////

	public Optional<Set<TaskBean>> mainTasks()
	{
		Set<TaskBean> result = new HashSet<>();

		Optional<Set<TaskBean>> optionalTasks = tasks();
		if (optionalTasks.isPresent())
		{
			Set<TaskBean> tasks = optionalTasks.get();
			for (TaskBean task : tasks)
			{
				if (not(task.superTask().isPresent())) result.add(task);
			}
		}

		if (not(result.isEmpty())) return Optional.of(result);
		return Optional.empty();
	}

	////////////////////////
	// relationship handling
	////////////////////////

	/**
	 * call this method from {@link TaskBean} constructor and {@link TaskBean#taskGroup(TaskGroupBean)} only
	 * @param task the {@link Task} to be added as predecessor
	 * @return {@code true} if the task was added, {@code false} if the task was already present in this task group
	 */
	protected boolean addTask(@NonNull TaskBean task) { return nonNullTasks().add(task); }

	@Override public boolean removeTask(@NonNull TaskBean task)
	{
		if (not(isNull(tasks))) return tasks.remove(task);
		return false;
	}

	@NonNull public TaskGroupFXBean toFXBean(ReferenceCycleTracking context)
	{
		return Map_TaskGroup_Bean_FXBean.INSTANCE.map(this, context);
	}
	@NonNull public TaskGroupEntityDTO toDTO(ReferenceCycleTracking context)
	{
		return Map_TaskGroup_Bean_EntityDTO.INSTANCE.map(this, context);
	}

	//////////////////////
	// mapstruct callbacks
	//////////////////////

	/** {@link TaskGroupBean} -> {@link TaskGroupBean} */
	public void beforeMapping(@NonNull TaskGroupEntityDTO in, @NonNull ReferenceCycleTracking context)
	{
		// set fields that can not be modified from outside
		id      = in.id     ();
		version = in.version();
		// mapping of other fields is done via mapstruct using java-beans accessors
	}

	/** {@link TaskGroupBean} -> {@link TaskGroupBean} */
	public void afterMapping(@NonNull TaskGroupEntityDTO in, @NonNull ReferenceCycleTracking context)
	{
		if (in.tasks().isPresent())
		{
			Set<TaskEntityDTO> relatedTasks = in.tasks().get();
			for (TaskEntityDTO relatedTask : relatedTasks)
			{
				// check if related task was already mapped
				TaskBean relatedTaskMapped = context.get(relatedTask, TaskBean.class);
				if (isNull(relatedTaskMapped))
						// start new mapping for related task
						relatedTaskMapped = relatedTask.toBean(context);
			}
		}
	}

	/** {@link TaskGroupFXBean} -> {@link TaskGroupBean} */
	public void beforeMapping(@NonNull TaskGroupFXBean in, @NonNull ReferenceCycleTracking context)
	{
		id      = in.id     ();
		version = in.version();
	}

	/** {@link TaskGroupFXBean} -> {@link TaskGroupBean} */
	public void afterMapping(@NonNull TaskGroupFXBean in, @NonNull ReferenceCycleTracking context)
	{
		if (in.tasks().isPresent())
		{
			Set<TaskFXBean> relatedTasks = in.tasks().get();
			for (TaskFXBean relatedTask : relatedTasks)
			{
				// check if related task was already mapped
				TaskBean relatedTaskMapped = context.get(relatedTask, TaskBean.class);
				if (isNull(relatedTaskMapped))
						// start new mapping for related task
						relatedTaskMapped = relatedTask.toBean(context);
			}
		}
	}

	public void beforeMapping(@NonNull TaskGroupLazy in)
	{
		// set fields that can not be modified from outside
		id      = in.id     ();
		version = in.version();
		// mapping of other fields is done via mapstruct using java-beans accessors{
	}

	public void afterMapping(@NonNull TaskGroupLazy in) { }

	private @NonNull Set<TaskBean> nonNullTasks()
	{
		if (isNull(tasks)) tasks = new HashSet<>();
		return tasks;
	}
}