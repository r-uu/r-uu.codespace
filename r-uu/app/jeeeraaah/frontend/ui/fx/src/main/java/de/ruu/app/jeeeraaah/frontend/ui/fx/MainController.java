package de.ruu.app.jeeeraaah.frontend.ui.fx;

import de.ruu.app.jeeeraaah.frontend.ui.fx.task.TaskManagement;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.gantt.TaskTreeTable;
import de.ruu.app.jeeeraaah.frontend.ui.fx.taskgroup.TaskGroupManagement;
import de.ruu.app.jeeeraaah.frontend.ui.fx.taskgroup.TaskGroupManagementDisposeRequestEvent;
import de.ruu.app.jeeeraaah.frontend.ui.fx.taskgroup.TaskGroupManagementDisposeRequestEvent.TaskGroupManagerDisposeRequestEventDispatcher;
import de.ruu.lib.fx.FXUtil;
import de.ruu.lib.fx.comp.FXCAppStartedEvent.FXCAppStartedEventDispatcher;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import jakarta.inject.Inject;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import lombok.extern.slf4j.Slf4j;

import static de.ruu.lib.fx.FXUtil.getStage;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2024.10.11 17:28:37:119
 */
@Slf4j
class MainController extends DefaultFXCController<Main, MainService> implements MainService
{
	private final static String APP_TITLE = "jeee---RAAAH";

	@FXML private Button     btnDash;
	@FXML private Button     btnTaskGroups;
	@FXML private Button     btnTasksByGroup;
	@FXML private Button     btnGantt;
	@FXML private Label      lblJeeeRaaah;
	@FXML private VBox       main;
	@FXML private AnchorPane root;

	@Inject private TaskGroupManagement taskGroupManagement;
	@Inject private TaskManagement      taskManagement;
	@Inject private TaskTreeTable taskTreeTable;

	@Inject private FXCAppStartedEventDispatcher                 eventDispatcherFXCAppStarted;
	@Inject private TaskGroupManagerDisposeRequestEventDispatcher eventDispatcherTaskGroupManagerExitRequested;

	@Override
	@FXML protected void initialize()
	{
		log.debug("eventDispatcherFXCAppStarted == null {}", eventDispatcherFXCAppStarted == null);

		eventDispatcherFXCAppStarted                .add(e -> onAppStarted(e));
		eventDispatcherTaskGroupManagerExitRequested.add(e -> onTaskGroupManagerExitRequested(e));

		btnDash        .setOnAction(e -> onDash(e));
		btnTaskGroups  .setOnAction(e -> onTaskGroups(e));
		btnTasksByGroup.setOnAction(e -> onTasksByGroup(e));
		btnGantt       .setOnAction(e -> onGantt(e));
	}

	private void onDash(ActionEvent e)
	{
		ObservableList<Node> mainRootChildren        = root.getChildren();
		Parent               taskGroupManagementRoot = taskGroupManagement.localRoot();

		mainRootChildren.remove(main);
		mainRootChildren.add(taskGroupManagementRoot);

		FXUtil.setAnchorsInAnchorPaneTo(taskGroupManagementRoot, 0);

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE + " - task groups"));
	}

	private void onTaskGroups(ActionEvent e)
	{
		ObservableList<Node> mainRootChildren        = root.getChildren();
		Parent               taskGroupManagementRoot = taskGroupManagement.localRoot();

		mainRootChildren.remove(main);
		mainRootChildren.add(taskGroupManagementRoot);

		FXUtil.setAnchorsInAnchorPaneTo(taskGroupManagementRoot, 0);

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE + " - task groups"));
	}

	private void onTasksByGroup(ActionEvent e)
	{
		ObservableList<Node> mainRootChildren   = root.getChildren();
		Parent               taskManagementRoot = taskManagement.localRoot();

		mainRootChildren.remove(main);
		mainRootChildren.add(taskManagementRoot);

		FXUtil.setAnchorsInAnchorPaneTo(taskManagementRoot, 0);

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE + " - tasks"));
	}

	private void onGantt(ActionEvent e)
	{
		ObservableList<Node> mainRootChildren      = root.getChildren();
		Parent               taskTreeTableViewRoot = taskTreeTable.localRoot();

		mainRootChildren.remove(main);
		mainRootChildren.add(taskTreeTableViewRoot);

		FXUtil.setAnchorsInAnchorPaneTo(taskTreeTableViewRoot, 0);

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE + " - gantt"));
	}

	private void onTaskGroupManagerExitRequested(TaskGroupManagementDisposeRequestEvent e)
	{
		ObservableList<Node> mainRootChildren = root.getChildren();

		mainRootChildren.remove(taskGroupManagement.localRoot());
		mainRootChildren.add(main);

		FXUtil.setAnchorsInAnchorPaneTo(main, 0);
	}

	private void onAppStarted(Object e) { getStage(root).ifPresent(s -> s.setTitle(APP_TITLE)); }
}