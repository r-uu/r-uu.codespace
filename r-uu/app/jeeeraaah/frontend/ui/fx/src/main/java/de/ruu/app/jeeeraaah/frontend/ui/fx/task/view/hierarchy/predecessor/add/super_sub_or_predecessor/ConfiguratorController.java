package de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.predecessor.add.super_sub_or_predecessor;

import de.ruu.app.jeeeraaah.client.fx.task.selector.TaskSelector;
import de.ruu.app.jeeeraaah.client.fx.task.view.hierarchy.predecessor.add.ActionAdd.Context;
import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.dialog.AlertDialog;
import de.ruu.lib.fx.control.treeview.TreeViewUtil;
import jakarta.inject.Inject;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.AnchorPane;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;

import static javafx.scene.control.Alert.AlertType.INFORMATION;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.08.14 09:59:47:114
 */
@Slf4j
class ConfiguratorController
		extends DefaultFXCController<Configurator, ConfiguratorService>
		implements ConfiguratorService
{
	@FXML private AnchorPane  root;
	@FXML private RadioButton rdBtnAddToSuperSubTask;
	@FXML private RadioButton rdBtnAddToPredecessorTask;
	@FXML private Label       lblSelectedSuperSubTask;
	@FXML private Label       lblSelectedPredecessorTask;
	@FXML private AnchorPane  nchrPnTaskSelector;

	@Inject private TaskSelector taskSelector;

	private Context context;

	private TaskBean predecessorToBeAdded;

	@Override @FXML protected void initialize()
	{
		ToggleGroup toggleGroup = new ToggleGroup();
		rdBtnAddToSuperSubTask   .setToggleGroup(toggleGroup);
		rdBtnAddToPredecessorTask.setToggleGroup(toggleGroup);

		nchrPnTaskSelector.getChildren().add(taskSelector.localRoot());
	}

	@Override public void context(Context context)
	{
		this.context = context;

		// update UI elements based on the context
		lblSelectedSuperSubTask.setText(context.treeItemSelectedSuperSubTask().getValue().name());
		if (TreeViewUtil.isRoot(context.treeItemSelectedPredecessorTask()))
		{
			lblSelectedPredecessorTask.setText("");
			rdBtnAddToPredecessorTask.setDisable(true);
		}
		else
		{
			lblSelectedPredecessorTask.setText(context.treeItemSelectedPredecessorTask().getValue().name());
			rdBtnAddToPredecessorTask.setDisable(false);
		}

		taskSelector.service().populateFor(context.treeItemSelectedSuperSubTask().getValue().taskGroup());
		taskSelector.service().selectionChangedProperty().addListener((obs, old, act) -> predecessorToBeAdded = act);
	}

	@Override public Optional<ActionAddToSuperSubOrPredecessorConfigurationResult> result()
	{
		if (context().isPresent())
		{
			TaskBean targetTask;

			if      (rdBtnAddToSuperSubTask   .isSelected()) targetTask = context.treeItemSelectedSuperSubTask   ().getValue();
			else if (rdBtnAddToPredecessorTask.isSelected()) targetTask = context.treeItemSelectedPredecessorTask().getValue();
			else
			{
				AlertDialog.showAndWait(
						"no target task selected",
						"Please select a target task for the new predecessor relation.",
						"Please select either a super/sub task or a predecessor task as target for the new predecessor relation.",
						INFORMATION);
				return Optional.empty();
			}

			return Optional.of(new ActionAddToSuperSubOrPredecessorConfigurationResult(predecessorToBeAdded, targetTask));
		}

		return Optional.empty();
	}

	private Optional<Context> context() { return Optional.ofNullable(context); }
}