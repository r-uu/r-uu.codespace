package de.ruu.app.jeeeraaah.frontend.ui.fx.taskgroup;

import de.ruu.app.jeeeraaah.common.api.bean.TaskGroupBean;
import de.ruu.app.jeeeraaah.frontend.ui.fx.model.TaskGroupFXBean;
import de.ruu.app.jeeeraaah.frontend.ui.fx.taskgroup.edit.TaskGroupEditor;
import de.ruu.app.jeeeraaah.frontend.ws.rs.TaskGroupServiceClient;
import de.ruu.lib.cdi.common.CDIUtil;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.dialog.ExceptionDialog;
import de.ruu.lib.mapstruct.ReferenceCycleTracking;
import de.ruu.lib.ws.rs.NonTechnicalException;
import de.ruu.lib.ws.rs.TechnicalException;
import jakarta.inject.Inject;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Dialog;
import javafx.scene.control.DialogPane;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.ToolBar;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import lombok.extern.slf4j.Slf4j;

import java.util.Objects;
import java.util.Optional;

import static de.ruu.app.jeeeraaah.frontend.common.mapping.Mappings.toBean;
import static de.ruu.app.jeeeraaah.frontend.common.mapping.Mappings.toFXBean;
import static de.ruu.lib.fx.FXUtil.getStage;
import static javafx.scene.control.ButtonBar.ButtonData.OK_DONE;
import static javafx.scene.control.ButtonType.CANCEL;
import static javafx.scene.control.ButtonType.OK;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2024.10.12 07:54:38:618
 */
@Slf4j
class TaskGroupManagementController
		extends DefaultFXCController<TaskGroupManagement, TaskGroupManagementService>
		implements TaskGroupManagementService
{
	private final static String APP_TITLE = "jeee RAAAH - task group management";

	@FXML private Button btnAdd;
	@FXML private Button btnEdit;
	@FXML private Button btnExit;
	@FXML private Button btnRemove;

	@FXML private ImageView ivwAdd;
	@FXML private ImageView ivwEdit;
	@FXML private ImageView ivwRemove;
	@FXML private ImageView ivwExit;

	@FXML private AnchorPane root;
	@FXML private ToolBar tbr1;
	@FXML private ToolBar tbr2;
	@FXML private TableView<TaskGroupFXBean> tv;
	@FXML private TextArea txtAreaDescription;
	@FXML private VBox vbx;

	@Inject private TaskGroupEditor editor;

	@Inject private FXCAppStartedEvent.FXCAppStartedEventDispatcher eventDispatcherFXCAppStarted;

	@Inject private TaskGroupServiceClient client;

	private Parent editorLocalRoot;

	@Override
	@FXML protected void initialize()
	{
		eventDispatcherFXCAppStarted.add(e -> onAppStarted(e));

		// force editor to fxml-inject internal fx-controls
		editorLocalRoot = editor.localRoot();

		TableViewConfigurator.configure(tv);
		ReferenceCycleTracking context = new ReferenceCycleTracking();
		try
		{
			client.findAll().forEach(tg -> tv.getItems().add(toFXBean(tg, context)));
		}
		catch (TechnicalException | NonTechnicalException e)
		{
			ExceptionDialog.showAndWait("failure retrieving task groups from backend", e);
		}

		tv.getSelectionModel().selectedItemProperty().addListener((obs, old, val) -> onSelectedTaskGroupChanged(obs, old, val));
		btnAdd .setOnAction(e -> onAdd ());
		btnEdit.setOnAction(e -> onEdit());
		btnExit.setOnAction(e -> onExit());

		getStage(root).ifPresent(s -> s.setTitle(APP_TITLE));
	}

	private void onSelectedTaskGroupChanged(ObservableValue<? extends TaskGroupFXBean> obs, TaskGroupFXBean old, TaskGroupFXBean val)
	{
		if (Objects.isNull(val))
		{
			txtAreaDescription.setText("");
			btnEdit.setDisable(true);
		}
		else
		{
			val.description().ifPresentOrElse(d -> txtAreaDescription.setText(d), () -> txtAreaDescription.setText(""));
			btnEdit.setDisable(false);
		}
	}

	private void onAdd()
	{
		ReferenceCycleTracking context = new ReferenceCycleTracking();
		// populate editor with new item, call to getService() has to be done after call to getLocalRoot() to make sure
		// internal java fx bindings can be established (see initialize)
		TaskGroupBean taskGroupBean   = new TaskGroupBean("new task group");
		TaskGroupFXBean taskGroupFXBean = toFXBean(taskGroupBean, context);
		editor.service().taskGroup(taskGroupFXBean);

		Dialog<TaskGroupFXBean> dialog = new Dialog<>();

		DialogPane pane = dialog.getDialogPane();
		pane.setContent(editorLocalRoot);
		pane.getButtonTypes().addAll(CANCEL, OK);

		dialog.setTitle("new task group");
		dialog.setResultConverter(this::dialogResultConverterFXBean);

		Optional<TaskGroupFXBean> optional = dialog.showAndWait();

		if (optional.isPresent())
		{
			taskGroupFXBean = optional.get();
			taskGroupBean   = toBean(taskGroupFXBean, context);

			// let client create a new item in backend
			try
			{
				taskGroupBean = client.create(taskGroupBean);
				// create fx bean from entity dto
				taskGroupFXBean = toFXBean(taskGroupBean, context);
				// add and select item with retrieved item
				tv.getItems().add(taskGroupFXBean);
				tv.getSelectionModel().select(taskGroupFXBean);
			}
			catch (TechnicalException | NonTechnicalException e)
			{
				ExceptionDialog.showAndWait("failure creating task groups in backend", e);
			}
		}
	}

	private void onEdit()
	{
		ReferenceCycleTracking context = new ReferenceCycleTracking();
		// populate editor with selected item, call to getService() has to be done after call to getLocalRoot() to make sure
		// internal java fx bindings can be established (see initialize)
		TaskGroupFXBean taskGroupFXBean = tv.getSelectionModel().getSelectedItem();
		editor.service().taskGroup(taskGroupFXBean);

		Dialog<TaskGroupFXBean> dialog = new Dialog<>();

		DialogPane pane = dialog.getDialogPane();
		pane.setContent(editorLocalRoot);
		pane.getButtonTypes().addAll(CANCEL, OK);

		dialog.setTitle("edit task group");
		dialog.setResultConverter(this::dialogResultConverterFXBean);

		Optional<TaskGroupFXBean> optional = dialog.showAndWait();

		if (optional.isPresent())
		{
			taskGroupFXBean = optional.get();
			TaskGroupBean taskGroupBean = toBean(optional.get(), context);

			// let client update the item in background
			try
			{
				taskGroupBean = client.update(taskGroupBean);
				// create fx bean from entity dto
				taskGroupFXBean = toFXBean(taskGroupBean, context);
				// add and select item with retrieved item
				tv.getSelectionModel().select(taskGroupFXBean);
			}
			catch (TechnicalException | NonTechnicalException e)
			{
				ExceptionDialog.showAndWait("failure updating task groups in backend", e);
			}
		}
	}

	private void onExit() { CDIUtil.fire(new TaskGroupManagementDisposeRequestEvent(this)); }

	private TaskGroupFXBean dialogResultConverterFXBean(ButtonType btn)
	{
		if (btn.getButtonData() == OK_DONE) return editor.service().taskGroup().orElse(null);
		return null;
	}

	private void onAppStarted(FXCAppStartedEvent e) { getStage(root).ifPresent(s -> s.setTitle(APP_TITLE)); }
}