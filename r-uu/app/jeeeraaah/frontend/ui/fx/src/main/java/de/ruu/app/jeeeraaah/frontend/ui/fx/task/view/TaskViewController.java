package de.ruu.app.jeeeraaah.frontend.ui.fx.task.view;

import de.ruu.app.jeeeraaah.frontend.ui.fx.model.TaskFXBean;
import de.ruu.app.jeeeraaah.frontend.ui.fx.model.TaskGroupFXBean;
import de.ruu.lib.fx.FXUtil;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2024.09.27 16:54:05:946
 */
@Slf4j
class TaskViewController extends DefaultFXCController<TaskView, TaskViewService> implements TaskViewService
{
	@FXML private GridPane   grdPn;
	@FXML private TextField  tfId;
	@FXML private TextField  tfName;
	@FXML private TextArea   taDescription;
	@FXML private DatePicker dtPckrStart;
	@FXML private DatePicker dtPckrEnd;
	@FXML private CheckBox   chkBxClosed;

//	@Inject private EventDispatcher<SelectedTaskChangedEvent> eventDispatcherSelectedTaskChanged;

	private TaskFXBean task;

	@Override
	@FXML protected void initialize()
	{
//		eventDispatcherSelectedTaskChanged.add(e -> onSelectedTaskChanged(e));
		// make sure the text field for the id can not be made editable
		tfId.disableProperty().addListener(vetoDisableTrue());
	}

	@Override public @NonNull Optional<TaskFXBean> task()
	{
		return Optional.ofNullable(task);
	}

	@Override public @NonNull TaskFXBean create(TaskGroupFXBean group)
	{
		TaskFXBean result = new TaskFXBean(group, tfName.getText());
		result.description(taDescription.getText());
		result.start      (dtPckrStart  .getValue());
		result.end        (dtPckrEnd    .getValue());
		result.closed     (chkBxClosed  .isSelected());
		return result;
	}

	@Override public void populateViewFor(@NonNull TaskFXBean task)
	{
		this.task = task;
		if (task.optionalId().isPresent()) tfId.setText(task.optionalId().get().toString());
		tfName       .textProperty    ().bindBidirectional(task.nameProperty       ());
		taDescription.textProperty    ().bindBidirectional(task.descriptionProperty());
		dtPckrStart  .valueProperty   ().bindBidirectional(task.startProperty      ());
		dtPckrEnd    .valueProperty   ().bindBidirectional(task.endProperty        ());
		chkBxClosed  .selectedProperty().bindBidirectional(task.closedProperty     ());
	}

	@Override public void setEditable(boolean editable) { FXUtil.setChildrenInTreeEditable(grdPn, true); }

//	private void onSelectedTaskChanged(SelectedTaskChangedEvent e)
//	{
//		log.debug("onSelectedTaskChanged: {}", e.getSource());
//	}

	private ChangeListener<? super Boolean> vetoDisableTrue()
	{
		return new ChangeListener<Boolean>()
		{
			@Override public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue)
			{
				tfId.setDisable(false);
			}
		};
	}
}