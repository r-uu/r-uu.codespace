package de.ruu.app.jeeeraaah.frontend.ui.fx.task.selector;

import de.ruu.app.jeeeraaah.frontend.ui.fx.task.TreeCellFactory;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.TreeItemTaskBean;
import de.ruu.app.jeeeraaah.common.bean.TaskBean;
import de.ruu.app.jeeeraaah.common.bean.TaskGroupBean;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.autocomplete.textfield.AutoCompleteTextField;
import de.ruu.lib.fx.control.autocomplete.textfield.AutoCompleteTextFieldBuilder;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.fxml.FXML;
import javafx.scene.control.Tab;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.HBox;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import static java.util.Objects.isNull;
import static javafx.scene.control.SelectionMode.SINGLE;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.08.14 09:59:47:114
 */
@Slf4j
class TaskSelectorController
		extends DefaultFXCController<TaskSelector, TaskSelectorService>
		implements TaskSelectorService
{
	@FXML private TreeView<TaskBean> trVw;
	@FXML private HBox               hBxAutoCompleteTextField;
	@FXML private Tab                tabList;
	@FXML private Tab                tabTree;

	private AutoCompleteTextField<TaskBean> textField;

	private ObjectProperty<TaskBean> selection = new SimpleObjectProperty<>();

	@Override @FXML protected void initialize()
	{
		trVw.setCellFactory(TreeCellFactory.cellFactory());
		trVw.setShowRoot(false);
		trVw.setRoot(new TreeItemTaskBean(new TaskBean(new TaskGroupBean("root"), "root")));

		trVw.getSelectionModel().setSelectionMode(SINGLE);
		trVw.getSelectionModel().selectedItemProperty().addListener((obs, old, act) -> onSelectedTreeItemChanged(act));
	}

	@Override public void populateFor(@NonNull TaskGroupBean taskGroup)
	{
		populateTreeWith                 (taskGroup);
		populateAutoCompleteTextFieldWith(taskGroup);
	}

	@Override public ReadOnlyObjectProperty<TaskBean> selectionChangedProperty() { return selection; }

	private void populateTreeWith(TaskGroupBean taskGroup)
	{
		trVw.getRoot().getChildren().clear(); // clear previous content
		Optional<Set<TaskBean>> optionalMainTasks = taskGroup.mainTasks();
		if (optionalMainTasks.isPresent())
		{
			List<TaskBean> mainTasksAsList = new ArrayList<>(optionalMainTasks.get());
			mainTasksAsList.sort((t1, t2) -> t1.name().compareTo(t2.name()));
			mainTasksAsList.forEach
			(
					mainTask -> trVw.getRoot().getChildren().add(populateTreeNode(trVw.getRoot(), mainTask))
			);
		}
		log.debug("populate tree view done");
	}

	private TreeItem<TaskBean> populateTreeNode(TreeItem<TaskBean> root, TaskBean task)
	{
		TreeItem<TaskBean> result = new TreeItem<>(task) { @Override public String toString() { return task.name(); } };
		task.subTasks().ifPresent(subTasks -> populateTreeNode(result, subTasks));
		return result;
	}

	private void onSelectedTreeItemChanged(TreeItem<TaskBean> act)
	{
		if (isNull(act)) selection.setValue(null);           // no task selected
		else             selection.setValue(act.getValue()); // task selected
	}

	private void populateTreeNode(TreeItem<TaskBean> parent, Set<TaskBean> children)
	{
		List<TaskBean> childrenAsList = new ArrayList<>(children);
		childrenAsList.sort((o1, o2) -> o1.name().compareTo(o2.name()));
		childrenAsList.forEach(task -> parent.getChildren().add(populateTreeNode(parent, task)));
	}

	private void populateAutoCompleteTextFieldWith(TaskGroupBean taskGroup)
	{
		Optional<Set<TaskBean>> optionalMainTasks = taskGroup.mainTasks();

		optionalMainTasks.ifPresent
		(
				mainTasks ->
				{
					List<TaskBean> tasks = new ArrayList<>();
					mainTasks.forEach(mainTask -> collectTaskWithSubTasks(mainTask, tasks));
					tasks.sort((t1, t2) -> t1.name().compareTo(t2.name()));

					textField =
							AutoCompleteTextFieldBuilder.<TaskBean>create()
									.items           (tasks.stream().sorted((t1, t2) -> t1.name().compareTo(t2.name())).toList())
									.suggestionFilter((task, text) -> task.name().toLowerCase().contains(text.toLowerCase()))
									.textProvider    (task -> task.name())
									.prompt          ("select successor task")
									.build();

					textField.setMaxWidth(Double.MAX_VALUE);
					HBox.setHgrow(textField, javafx.scene.layout.Priority.ALWAYS);

					hBxAutoCompleteTextField.getChildren().clear();
					hBxAutoCompleteTextField.getChildren().add(textField);
					textField.valueProperty().addListener((obs, old, val) -> selection.setValue(val));
				}
		);
	}

	private void collectTaskWithSubTasks(TaskBean task, List<TaskBean> tasks)
	{
		tasks.add(task);
		task.subTasks().ifPresent(subTasks -> subTasks.forEach(subTask -> collectTaskWithSubTasks(subTask, tasks)));
	}
}