package de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.supersub;

import de.ruu.app.jeeeraaah.common.api.bean.TaskBean;
import de.ruu.app.jeeeraaah.common.api.bean.TaskGroupBean;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.edit.TaskEditor;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.TaskHierarchyControllerAbstract;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.supersub.add.ActionAdd;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.supersub.add.ActionAdd.Context;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.hierarchy.supersub.add.ActionRemove;
import de.ruu.app.jeeeraaah.frontend.ws.rs.TaskGroupServiceClient;
import de.ruu.app.jeeeraaah.frontend.ws.rs.TaskServiceClient;
import de.ruu.lib.fx.control.dialog.AlertDialog;
import jakarta.inject.Inject;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.fxml.FXML;
import javafx.scene.control.TreeItem;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static java.util.Objects.isNull;
import static javafx.scene.control.Alert.AlertType.ERROR;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.06.03 12:49:45:376
 */
@Slf4j
class TaskHierarchySuperSubTasksController
		extends TaskHierarchyControllerAbstract implements TaskHierarchySuperSubTasksService
{
	@Inject private TaskEditor taskEditor;
	@Inject private TaskServiceClient taskServiceClient;
	@Inject private TaskGroupServiceClient taskGroupServiceClient;

	@Override @FXML protected void initialize()
	{
		super.initialize();

		buttonAdd   ().setOnAction(e -> onButtonAddAction   ());
		buttonRemove().setOnAction(e -> onButtonRemoveAction());
	}

	@Override public ReadOnlyObjectProperty<TreeItem<TaskBean>> selectedItem()
	{
		return treeView().getSelectionModel().selectedItemProperty();
	}

	@Override protected TreeItem<TaskBean> populateTreeNode(TreeItem<TaskBean> root, TaskBean task)
	{
		TreeItem<TaskBean> result = new TreeItem<>(task) { @Override public String toString() { return task.name(); } };
		task.subTasks().ifPresent(subTasks -> populateTreeNode(result, subTasks));
		return result;
	}

	private void onButtonAddAction()
	{
		TaskGroupBean activeTaskGroupBean = activeTaskGroupProperty().getValue();
		if (isNull(activeTaskGroupBean))
		{
			AlertDialog.showAndWait(
					"failure adding task", "no active task group", "select a task group to be the active task group", ERROR);
			return;
		}

		Context context = new Context(treeView(), activeTaskGroupBean, taskEditor, taskServiceClient);
		new ActionAdd(context).execute();
	}

	private void onButtonRemoveAction()
	{
		TaskGroupBean activeTaskGroupBean = activeTaskGroupProperty().getValue();
		if (isNull(activeTaskGroupBean))
		{
			AlertDialog.showAndWait(
					"failure removing task", "no active task group", "select a task group to be the active task group", ERROR);
			return;
		}

		ActionRemove.Context context =
				new ActionRemove.Context(treeView(), activeTaskGroupBean, taskGroupServiceClient, taskServiceClient);
		new ActionRemove(context).execute();
	}

	private void populateTreeNode(TreeItem<TaskBean> parent, Set<TaskBean> children)
	{
		List<TaskBean> childrenAsList = new ArrayList<>(children);
		childrenAsList.sort((o1, o2) -> o1.name().compareTo(o2.name()));
		childrenAsList.forEach(task -> parent.getChildren().add(populateTreeNode(parent, task)));
	}
}