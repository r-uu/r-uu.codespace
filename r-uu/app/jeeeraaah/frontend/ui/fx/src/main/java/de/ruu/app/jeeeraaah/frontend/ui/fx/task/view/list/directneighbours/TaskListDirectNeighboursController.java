package de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.list.directneighbours;

import de.ruu.app.jeeeraaah.common.api.bean.TaskBean;
import de.ruu.lib.fx.comp.FXCController.DefaultFXCController;
import de.ruu.lib.fx.control.ListViewWithCheckableItemsDecorator;
import jakarta.enterprise.inject.spi.CDI;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.ListView;
import lombok.NonNull;

import java.util.List;

import static de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.list.directneighbours.TaskListDirectNeighboursService.NeighbourType.PREDECESSOR;
import static de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.list.directneighbours.TaskListDirectNeighboursService.NeighbourType.SUB;
import static de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.list.directneighbours.TaskListDirectNeighboursService.NeighbourType.SUCCESSOR;
import static de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.list.directneighbours.TaskListDirectNeighboursService.NeighbourType.SUPER;

/**
 * Java FX Component View Controller
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCViewController} at 2025.06.13 16:15:13:836
 */
class TaskListDirectNeighboursController
		extends DefaultFXCController<TaskListDirectNeighbours, TaskListDirectNeighboursService>
		implements TaskListDirectNeighboursService
{
//	@FXML private Label              label;
	@FXML private ListView<TaskBean> listView;

	private ObservableList<TaskBean> taskBeans = FXCollections.observableArrayList();

	private ListViewWithCheckableItemsDecorator<TaskBean> decorator;

	@Override @FXML protected void initialize()
	{
		listView.setItems(taskBeans);
		decorator = new ListViewWithCheckableItemsDecorator<>(listView, t -> t.name());
		CDI.current().getBeanManager().getEvent().fire(new TaskViewListDirectNeighboursServiceReadyEvent(this));
	}

	@Override public void populateViewFor(@NonNull TaskBean task, @NonNull NeighbourType neighbourType)
	{
		taskBeans.clear();

		if      (neighbourType == SUPER      ) task.superTask   ().ifPresent(t  -> taskBeans.add   (t ));
		else if (neighbourType == PREDECESSOR) task.predecessors().ifPresent(ts -> taskBeans.addAll(ts));
		else if (neighbourType == SUB        ) task.subTasks    ().ifPresent(ts -> taskBeans.addAll(ts));
		else if (neighbourType == SUCCESSOR  ) task.successors  ().ifPresent(ts -> taskBeans.addAll(ts));

//		if      (neighbourType == SUPER      ) label.setText("super task"  );
//		else if (neighbourType == PREDECESSOR) label.setText("predecessors");
//		else if (neighbourType == SUB        ) label.setText("sub tasks"   );
//		else if (neighbourType == SUCCESSOR  ) label.setText("successors"  );
	}

	@Override public @NonNull ListView<TaskBean> listView() { return listView; }

	@Override public @NonNull List<TaskBean> selectedItems() { return decorator.selectedItems(); }
}