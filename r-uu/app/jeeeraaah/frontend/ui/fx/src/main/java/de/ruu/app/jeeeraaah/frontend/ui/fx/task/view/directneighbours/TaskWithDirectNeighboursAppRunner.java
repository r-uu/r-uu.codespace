package de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.directneighbours;

import de.ruu.app.jeeeraaah.common.api.bean.TaskBean;
import de.ruu.app.jeeeraaah.common.api.bean.TaskGroupBean;
import de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.directneighbours.TaskWithDirectNeighboursService.TaskViewWithDirectNeighboursServiceReadyEvent;
import de.ruu.lib.fx.FXUtil;
import de.ruu.lib.fx.comp.FXCAppRunner;
import de.ruu.lib.fx.comp.FXCAppStartedEvent;
import de.ruu.lib.fx.comp.FXCAppStartedEvent.FXCAppStartedEventDispatcher;
import de.ruu.lib.fx.comp.FXCService;
import de.ruu.lib.fx.comp.FXCView;
import jakarta.enterprise.inject.spi.CDI;
import javafx.stage.Stage;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.function.Consumer;

import static de.ruu.app.jeeeraaah.frontend.ui.fx.task.view.directneighbours.TaskWithDirectNeighboursService.TaskViewWithDirectNeighboursServiceReadyEvent.*;

/**
 * Java FX Component Application Runner {@link TaskWithDirectNeighboursAppRunner}
 * <p>
 * generated by {@code de.ruu.lib.gen.java.fx.comp.GeneratorFXCAppRunner} at 2025.06.13 17:06:53:276
 */
@Slf4j
class TaskWithDirectNeighboursAppRunner extends FXCAppRunner
{
	public static void main(String[] args)
	{
		log.debug("starting TaskViewWithDirectNeighboursAppRunner.class.getName()");
		addReadsUnnamedModule();
		FXCAppStartedEvent                           .addReadsUnnamedModule();
		Runnable runBeforeAppLaunch =
				() ->
				{
					log.debug("runBeforeAppLaunch");
					TaskViewWithDirectNeighboursServiceReadyEventDispatcher serviceReadyEventDispatcher =
							CDI.current().select(TaskViewWithDirectNeighboursServiceReadyEventDispatcher.class).get();
					serviceReadyEventDispatcher.add(new TaskViewWithDirectNeighboursServiceReadyEventConsumer());
					FXCAppStartedEventDispatcher appStartedEventDispatcher =
							CDI.current().select(FXCAppStartedEventDispatcher.class).get();
					appStartedEventDispatcher.add(new FXCAppStartedEventEventConsumer());
				};
		FXCAppRunner.run(TaskWithDirectNeighboursApp.class, args, runBeforeAppLaunch);
		log.debug("finished TaskViewWithDirectNeighboursAppRunner.class.getName()");
	}

	private static class TaskViewWithDirectNeighboursServiceReadyEventConsumer
			implements Consumer<TaskViewWithDirectNeighboursServiceReadyEvent>
	{
		@Override public void accept(TaskViewWithDirectNeighboursServiceReadyEvent e)
		{
			log.debug("received event {}", e);
			TaskWithDirectNeighboursService service = e.source();

			TaskGroupBean group        = new TaskGroupBean("group");
			TaskBean task         = new TaskBean     (group, "task");
			TaskBean      superTask    = new TaskBean     (group, "super task"   );
			TaskBean      predecessor1 = new TaskBean     (group, "predecessor 1");
			TaskBean      predecessor2 = new TaskBean     (group, "predecessor 2");
			TaskBean      predecessor3 = new TaskBean     (group, "predecessor 3");
			TaskBean 		  successor1   = new TaskBean     (group, "successor 1"  );
			TaskBean 		  successor2   = new TaskBean     (group, "successor 2"  );
			TaskBean 		  successor3   = new TaskBean     (group, "successor 3"  );
			TaskBean 		  sub1         = new TaskBean     (group, "sub task 1"   );
			TaskBean 		  sub2         = new TaskBean     (group, "sub task 2"   );
			TaskBean 		  sub3         = new TaskBean     (group, "sub task 3"   );

			task.superTask(superTask);

			task.addPredecessor(predecessor1);
			task.addPredecessor(predecessor2);
			task.addPredecessor(predecessor3);

			task.addSuccessor(successor1);
			task.addSuccessor(successor2);
			task.addSuccessor(successor3);

			task.addSubTask(sub1);
			task.addSubTask(sub2);
			task.addSubTask(sub3);

			service.populateViewFor(task);
		}
	}

	private static class FXCAppStartedEventEventConsumer implements Consumer<FXCAppStartedEvent>
	{
		@Override public void accept(FXCAppStartedEvent e)
		{
			log.debug("received event {}", e);
			Optional<FXCView<? extends FXCService>> optionalView = e.data();
			optionalView.ifPresent
			(
					v ->
					{
						Optional<Stage> stage = FXUtil.getStage(v.localRoot());
						stage.ifPresent
						(
								s ->
								{
									s.setTitle("jeee RAAAH - task in it's direct neighbourhood");
									s.sizeToScene();
								}
						);
					}
			);
		}
	}
}